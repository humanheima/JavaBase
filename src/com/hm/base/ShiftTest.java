package com.hm.base;

/**
 * Created by dumingwei on 2017/10/2.
 * 正数的反码补码都是本身
 * 负数的反码：符号位保持不变，其余各位，按位取反
 * 负数的补码：就是反码+1
 * <p>
 * 正数取非值 以4为例
 * 原码     0000 0100
 * 按位取反 1111 1011
 * 减去1    1111 1010
 * 除符号位按位取反 1000 0101 =-5
 * <p>
 * 负数取非值 以-5为例
 * 原码 1000 0101
 * 取反码，符号位不变 1111 1010
 * 取补码            1111 1011
 * 按位取反          0000 0100 =4
 * <p>
 * <p>
 * java中有三种移位运算符
 * <p>
 * << 左移运算符，num << 1,相当于num乘以2
 * <p>
 * >> 右移运算符，num >> 1,相当于num除以2
 * <p>
 * >>> 无符号右移，忽略符号位，空位都以0补齐
 * <p>
 * 例如3 转化为2进制 0000 0000 0000 0000 0000 0000 0000 0011
 */
public class ShiftTest {

    public static void main(String[] args) {
        // System.out.println(3 + ((9 - 3) >> 1));
        /*System.out.println(0);
        System.out.println(~-5);
        System.out.println("---------------");
        System.out.println(0&7);
*/
        //System.out.println(-1 << 29);

        System.out.println(-4 & 4);

        /**
         * -1 原码 1000 0000 0000 0000 0000 0000 0000 0001
         *    反码 1111 1111 1111 1111 1111 1111 1111 1110
         *    补码 1111 1111 1111 1111 1111 1111 1111 1111
         *    左移29位 符号为不变 1111 1111 1111 1111 1111 1111 1111 1111
         *
         */

        /**
         * 例如5 转化为2进制 0000 0000 0000 0000 0000 0000 0000 0101
         * 左移两位得到 0000 0000 0000 0000 0000 0000 0001 0100 转化成十进制是20
         * 右移两位得到 0000 0000 0000 0000 0000 0000 0000 0001 转化成十进制是1
         * 无符号右移两位得到 0000 0000 0000 0000 0000 0000 0000 0001 转化成十进制是1
         *
         * 例如-5 转化成2进制 1000 0000 0000 0000 0000 0000 0000 0101 ,
         *  在计算机中用补码表示 是 1111 1111 1111 1111 1111 1111 1111 1011
         *
         *  补码左移两位得到 1111 1111 1111 1111 1111 1111 1110 1100 转化成原码是 1000 0000 0000 0000 0000 0000 0001 0100 用十进制表示 是 -20
         *
         *  补码右移两位得到 1111 1111 1111 1111 1111 1111 1111 1110 转化成原码是 1000 0000 0000 0000 0000 0000 0000 0010 用十进制表示是 -2
         *
         *
         *  补码无符号位 右移两位得到 0011 1111 1111 1111 1111 1111 1111 1110 这时候 补码为正数就是代表原码 用十进制表示是 1073741822
         */
        System.out.println(-5 >> 4);

        System.out.println(1 << 33);
        System.out.println(1 << 1);

        printInfo(-1 << 29);
        //printInfo(-5<<2);

    }

    /**
     * 26      * 输出一个int的二进制数
     * 27      * @param num
     * 28
     */


    private static void printInfo(int num) {
        System.out.println(Integer.toBinaryString(num));
    }
}
